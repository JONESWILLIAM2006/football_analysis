version: '3.8'

services:
  # Main Web Application
  webapp:
    build: 
      context: .
      dockerfile: Dockerfile.advanced
    ports:
      - "8501:8501"
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - MONGODB_URL=mongodb://mongo:27017/football_analysis
      - MINIO_ENDPOINT=minio:9000
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin
    volumes:
      - ./outputs:/app/outputs
      - ./highlights:/app/highlights
      - ./models:/app/models
      - ./data:/app/data
    depends_on:
      - redis
      - mongo
      - minio
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

  # Background Workers
  worker:
    build: 
      context: .
      dockerfile: Dockerfile.advanced
    command: celery -A football_analysis worker --loglevel=info --concurrency=2
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - MONGODB_URL=mongodb://mongo:27017/football_analysis
      - MINIO_ENDPOINT=minio:9000
    volumes:
      - ./outputs:/app/outputs
      - ./highlights:/app/highlights
      - ./models:/app/models
      - ./data:/app/data
    depends_on:
      - redis
      - mongo
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
      replicas: 2

  # FastAPI Backend
  api:
    build: 
      context: .
      dockerfile: Dockerfile.api
    ports:
      - "8000:8000"
    environment:
      - MONGODB_URL=mongodb://mongo:27017/football_analysis
      - REDIS_URL=redis://redis:6379/0
      - MINIO_ENDPOINT=minio:9000
    volumes:
      - ./outputs:/app/outputs
      - ./models:/app/models
    depends_on:
      - redis
      - mongo
      - minio

  # Redis Message Broker
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes

  # MongoDB Database
  mongo:
    image: mongo:6
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
      - mongo_config:/data/configdb
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=password
      - MONGO_INITDB_DATABASE=football_analysis

  # MinIO Object Storage
  minio:
    image: minio/minio:latest
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin
    command: server /data --console-address ":9001"

  # MLflow Tracking Server
  mlflow:
    image: python:3.11-slim
    ports:
      - "5000:5000"
    volumes:
      - mlflow_data:/mlflow
      - ./models:/models
    environment:
      - MLFLOW_BACKEND_STORE_URI=sqlite:///mlflow/mlflow.db
      - MLFLOW_DEFAULT_ARTIFACT_ROOT=/mlflow/artifacts
    command: >
      bash -c "pip install mlflow && 
               mlflow server 
               --backend-store-uri sqlite:///mlflow/mlflow.db 
               --default-artifact-root /mlflow/artifacts 
               --host 0.0.0.0 
               --port 5000"

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin

  # RTSP Stream Ingester
  rtsp-ingester:
    build:
      context: .
      dockerfile: Dockerfile.rtsp
    environment:
      - REDIS_URL=redis://redis:6379/0
      - RTSP_STREAMS=rtsp://camera1:554/stream,rtsp://camera2:554/stream
    depends_on:
      - redis
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

volumes:
  redis_data:
  mongo_data:
  mongo_config:
  minio_data:
  mlflow_data:
  prometheus_data:
  grafana_data:

networks:
  default:
    driver: bridge